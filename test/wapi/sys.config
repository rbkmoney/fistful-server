[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/wapi/console.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => {file, "/var/log/wapi/access_log.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},

    {wapi, [
        {ip, "::"},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {scoper_event_handler_options, #{
            event_handler_opts => #{
                formatter_opts => #{
                    max_length => 1000,
                    max_printable_string_length => 80
                }
            }
        }},
        {realm, <<"external">>},
        {public_endpoint, <<"http://wapi">>},
        {access_conf, #{
            jwt => #{
                keyset => #{
                    wapi     => {pem_file, "var/keys/wapi/private.pem"}
                }
            }
        }},
        {service_urls, #{
            cds_storage         => "http://cds:8022/v2/storage",
            binbase             => "http://binbase:8022/v1/binbase",
            identdoc_storage    => "http://cds:8022/v1/identity_document_storage"
        }},
        {health_checkers, [
            {erl_health, disk     , ["/", 99]   },
            {erl_health, cg_memory, [99]        },
            {erl_health, service  , [<<"wapi">>]}
        ]},
        {lechiffre_opts,  #{
            encryption_key_path => "var/keys/wapi/jwk.json",
            decryption_key_paths => ["var/keys/wapi/jwk.json"]
        }},
        {validation, #{
            env => #{now => {{2020, 03, 01}, {0, 0, 0}}}
        }}
    ]},

    {snowflake, [
        {max_backward_clock_moving, 1000},  % 1 second
        {machine_id, hostname_hash}
    ]}
].
